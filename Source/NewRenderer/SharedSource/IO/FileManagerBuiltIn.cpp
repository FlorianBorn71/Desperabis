#include "pch.h"
#include <IO/FileManagerBuiltIn.h>

struct FileEntry
{
    const unsigned char* m_data;
    size_t m_dataSize;
};

static std::map<std::wstring_view, FileEntry> g_fileRegistry;

// external autogenerated functions:
void RegisterFiles_BuiltInShaders();
void RegisterFiles_BuiltInANIMS();
void RegisterFiles_BuiltInGRAFIK();
void RegisterFiles_BuiltInLEVEL();
void RegisterFiles_BuiltInVEKT();
void RegisterFiles_BuiltInSAMP();

void FileManagerBuiltIn::Initialize()
{
	g_Instance = this;
	RegisterFiles_BuiltInShaders();
	RegisterFiles_BuiltInANIMS();
	RegisterFiles_BuiltInGRAFIK();
	RegisterFiles_BuiltInLEVEL();
	RegisterFiles_BuiltInVEKT();
}

void FileManagerBuiltIn::Deinitialize()
{

}


FUTURE(std::vector<unsigned char>) FileManagerBuiltIn::ReadDataFuture(std::wstring_view filename)
{
    if (g_fileRegistry.find(filename) != g_fileRegistry.end())
    {
		const FileEntry& entry = g_fileRegistry.at(filename);
		std::vector<unsigned char> data(entry.m_data, entry.m_data + entry.m_dataSize);
		CO_RETURN data;
    }

	if (FILE* fIn = OpenFile(filename))
	{
		fseek(fIn, 0, SEEK_END);
		size_t fileLength = ftell(fIn);
		fseek(fIn, 0, SEEK_SET);
		std::vector<unsigned char> data;
		data.resize(fileLength);
		for (size_t i = 0; i < fileLength; i++)
		{
			fread(&data[i], 1, 1, fIn);
		}
		fclose(fIn);
		return data;
	}

    CO_RETURN std::vector<unsigned char>();
}

FILE* FileManagerBuiltIn::OpenFile(const std::filesystem::path& path)
{
	for (const std::filesystem::path& p : m_externalDirs)
	{
		std::string s = (p / path).string();
		FILE* fIn = nullptr;
		fopen_s(&fIn, s.c_str(), "rb");
		if (fIn != nullptr)
		{
			return fIn;
		}
	}
	return nullptr;
}

bool FileManagerBuiltIn::Exists(std::wstring_view filename)
{
    if (g_fileRegistry.find(filename) != g_fileRegistry.end())
    {
        return true;
    }

	if (FILE* f = OpenFile(filename))
	{
		fclose(f);
		return true;
	}
	
    return false;
}


void FileManagerBuiltIn::AddExternalDataDir(std::filesystem::path path)
{
    m_externalDirs.push_back(std::wstring(path));
}

std::wstring FileManagerBuiltIn::FilenameToNative(std::wstring_view filename)
{
    std::wstring result(filename);
    std::replace(result.begin(), result.end(), '\\', '/');
	return result;
}

void FileManagerBuiltIn::RegisterFile(std::wstring_view name, const unsigned char* data, size_t dataSize)
{
    g_fileRegistry[name] = {data, dataSize};
}
